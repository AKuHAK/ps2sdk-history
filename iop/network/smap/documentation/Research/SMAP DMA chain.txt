#define MAX_PACKETS	64

struct PacketData{
	unsigned int size;	/* The size of the packet, in bytes. Do not round off. */
	unsigned int offset;	/* The offset of the packet, in the main packet buffer. */
};

struct CurrentDmaTransferData{
	unsigned char IsValid, NumBdPackets;
	unsigned short int BdPtr;
	unsigned int length;	/* The length of the transfer, rounded up to the nearest quadlet. */
	void *start;		/* The destination of the transfer. */
};

struct IncomingPacketReqs{
	unsigned int NumPackets, TotalLength;
	struct PacketData PacketData[MAX_PACKETS];
	unsigned char buffer[MAX_PACKETS*1536];
};

static struct CurrentDmaTransferData CurrentDmaTransferData;

static void TransferPendingPackets(void){
	unsigned int i;

	if(CurrentDmaTransferData.IsValid){
		CopyFromFIFO(CurrentDmaTransferData.start, CurrentDmaTransferData.length,  CurrentDmaTransferData.BdPtr);
		for(i=0; i<CurrentDmaTransferData.NumBdPackets; i++){
			RxBd[(CurrentDmaTransferData.BdPtr+i)&0x3F].stat&=~READY;
			SMAP_REG8(SMAP_R_RXFIFO_PKT_DEC)=0;
		}

		CurrentDmaTransferData.IsValid=0;
		CurrentDmaTransferData.NumBdPackets=0;
	}
}

static int EnqueuePackets(struct IncomingPacketReqs *IncomingPacketReqs, unsigned short int BdPtr, unsigned int length){
	struct IncomingPacketReqs *PacketReq;
	unsigned int PacketSizeRounded;
	int result;

	if(IncomingPacketReqs->NumPackets<MAX_PACKETS){
		PacketSizeRounded=(length+3)&~3;

		/* If there is a pending DMA transfer, see whether this packet fits right after the end of it.
			If it does, just increase the length of the transfer to include this packet.
			Otherwise, start the pending DMA transfer and the new incoming packet shall become the start of the next pending DMA transfer. */
		if(CurrentDmaTransferData.IsValid){
			if(CurrentDmaTransferData.BdPtr+CurrentDmaTransferData.length==BdPtr){
				CurrentDmaTransferData.length+=PacketSizeRounded;
			}
			else{
				TransferPendingPackets();

				CurrentDmaTransferData.start=IncomingPacketReqs.TotalLength;
				CurrentDmaTransferData.BdPtr=BdPtr;
				CurrentDmaTransferData.length=PacketSizeRounded;
			}
		}
		else{
			CurrentDmaTransferData.IsValid=1;
			CurrentDmaTransferData.NumBdPackets=0;

			CurrentDmaTransferData.start=&IncomingPacketReqs.buffer[IncomingPacketReqs.TotalLength];
			CurrentDmaTransferData.BdPtr=BdPtr;
			CurrentDmaTransferData.length=PacketSizeRounded;
		}

		//Fill in the packet's data.
		PacketReq=&IncomingPacketReqs->PacketData[IncomingPacketReqs.NumPackets];
		PacketReq->size=length;
		PacketReq->offset=IncomingPacketReqs.TotalLength;

		IncomingPacketReqs->NumPackets++;
		CurrentDmaTransferData->NumBdPackets++;
		IncomingPacketReqs->TotalLength+=PacketSizeRounded;
		result=0;
	}
	else result=ENOMEM;

	return result;
}

static int SendPackets(struct IncomingPacketReqs *IncomingPacketReqs){
	if(IncomingPacketReqs.NumPackets>0){

		IncomingPacketReqs->NumPackets=0;
		IncomingPacketReqs->TotalLength=0;
	}
}

static int CopyFromFIFO(void *buffer, unsigned int length, unsigned short int BdPtrStart){

}

static int RxIntHandler(void){
	int NumPacketsReceived;
	struct IncomingPacketReqs IncomingPacketReqs;

	NumPacketsReceived=0;
	IncomingPacketReqs.NumPackets=0;
	IncomingPacketReqs.TotalLength=0;
	while(RxbdEnt->stat&READY){
		while(EnqueuePackets(&IncomingPacketReqs, RxbdEnt->pointer, RxbdEnt->length)!=0){
			SendPackets(&IncomingPacketReqs);
		}
	}

	SendPackets(&IncomingPacketReqs);

	return NumPacketsReceived;
}
